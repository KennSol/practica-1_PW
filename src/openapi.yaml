openapi: 3.0.2
info:
  title: Social API
  version: 1.0.0
  description: API para una aplicaci√≥n web de mensajes y seguimiento de usuarios.
servers:
  - url: http://localhost:3000
paths:
  /users:
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Email already registered
  /users/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          description: Invalid credentials
  /users/{id}:
    get:
      summary: Get user info
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
    delete:
      summary: Delete user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: User deleted
        '403':
          description: Not authorized
        '404':
          description: User not found
  /users/{id}/follow:
    post:
      summary: Follow a user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Followed successfully
        '400':
          description: Cannot follow yourself or already following
    delete:
      summary: Unfollow a user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Unfollowed successfully
        '404':
          description: Not following this user
  /messages:
    post:
      summary: Create a message
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageCreate'
      responses:
        '201':
          description: Message created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
    get:
      summary: Get latest messages
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
  /messages/search:
    get:
      summary: Search messages by content
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of matching messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
  /messages/user/{id}:
    get:
      summary: Get messages by user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: List of user messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
  /messages/feed:
    get:
      summary: Get messages from followed users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of followed users' messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
components:
  schemas:
    UserCreate:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required: [email, password]
    UserLogin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required: [email, password]
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        created_at:
          type: string
          format: date-time
    Token:
      type: object
      properties:
        access_token:
          type: string
        token_type:
          type: string
    MessageCreate:
      type: object
      properties:
        content:
          type: string
      required: [content]
    Message:
      type: object
      properties:
        id:
          type: integer
        user_id:
          type: integer
        content:
          type: string
        created_at:
          type: string
          format: date-time
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT